diff --git a/code/filesys/synchdisk.cc b/code/filesys/synchdisk.cc
index 9a189e0..1156184 100644
--- a/code/filesys/synchdisk.cc
+++ b/code/filesys/synchdisk.cc
@@ -27,8 +27,10 @@
 
 SynchDisk::SynchDisk()
 {
-    semaphore = new Semaphore("synch disk", 0);
-    lock = new Lock("synch disk lock");
+    char synchdiskStringConstant[] = "synch disk";
+    char synchdisklockStringConstant[] = "synch disk lock";
+    semaphore = new Semaphore(synchdiskStringConstant, 0);
+    lock = new Lock(synchdisklockStringConstant);
     disk = new Disk(this);
 }
 
diff --git a/code/lib/copyright.h b/code/lib/copyright.h
index b2fa8a8..fa1debb 100644
--- a/code/lib/copyright.h
+++ b/code/lib/copyright.h
@@ -20,5 +20,5 @@ PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 */
 
 #ifdef MAIN	/* include the copyright message in every executable */
-static char *copyright = "Copyright (c) 1992-1993 The Regents of the University of California.  All rights reserved.";
+static char copyright[] = "Copyright (c) 1992-1993 The Regents of the University of California.  All rights reserved.";
 #endif // MAIN
diff --git a/code/lib/libtest.cc b/code/lib/libtest.cc
index 482dd78..9aa1112 100644
--- a/code/lib/libtest.cc
+++ b/code/lib/libtest.cc
@@ -55,8 +55,10 @@ static int listTestVector[] = { 9, 5, 7 };
 
 // Array of values to be inserted into the HashTable
 // There are enough here to force a ReHash().
-static char *hashTestVector[] = { "0", "1", "2", "3", "4", "5", "6",
+static char numbers[15][3] = { "0", "1", "2", "3", "4", "5", "6",
 	 "7", "8", "9", "10", "11", "12", "13", "14"};
+static char *hashTestVector[15];
+static const int hashTestVectorLength = 15;
 
 //----------------------------------------------------------------------
 // LibSelfTest
@@ -73,10 +75,13 @@ LibSelfTest () {
 	new HashTable<int, char *>(HashKey, HashInt);
 
 
+    for (int i = 0; i < 15; ++i) {
+        hashTestVector[i] = &numbers[i][0];
+    }
     map->SelfTest();
     list->SelfTest(listTestVector, sizeof(listTestVector)/sizeof(int));
     sortList->SelfTest(listTestVector, sizeof(listTestVector)/sizeof(int));
-    hashTable->SelfTest(hashTestVector, sizeof(hashTestVector)/sizeof(char *));
+    hashTable->SelfTest(hashTestVector, hashTestVectorLength);
 
     delete map;
     delete list;
diff --git a/code/machine/interrupt.cc b/code/machine/interrupt.cc
index ee22083..33e35d3 100644
--- a/code/machine/interrupt.cc
+++ b/code/machine/interrupt.cc
@@ -26,8 +26,8 @@
 
 // String definitions for debugging messages
 
-static char *intLevelNames[] = { "off", "on"};
-static char *intTypeNames[] = { "timer", "disk", "console write",
+static char intLevelNames[][5] = { "off", "on"};
+static char intTypeNames[][50] = { "timer", "disk", "console write",
 			"console read", "network send",
 			"network recv"};
 
diff --git a/code/machine/machine.cc b/code/machine/machine.cc
index a7b1cd5..1cb362c 100644
--- a/code/machine/machine.cc
+++ b/code/machine/machine.cc
@@ -13,7 +13,7 @@
 
 // Textual names of the exceptions that can be generated by user program
 // execution, for debugging.
-static char* exceptionNames[] = { "no exception", "syscall",
+static char exceptionNames[][50] = { "no exception", "syscall",
 				"page fault/no TLB entry", "page read only",
 				"bus error", "address error", "overflow",
 				"illegal instruction" };
diff --git a/code/machine/mipssim.cc b/code/machine/mipssim.cc
index 517c140..55390f5 100644
--- a/code/machine/mipssim.cc
+++ b/code/machine/mipssim.cc
@@ -37,9 +37,9 @@ class Instruction {
 
     unsigned int value; // binary representation of the instruction
 
-    char opCode;     // Type of instruction.  This is NOT the same as the
+    int opCode;     // Type of instruction.  This is NOT the same as the
     		     // opcode field from the instruction: see defs in mips.h
-    char rs, rt, rd; // Three registers from instruction.
+    int rs, rt, rd; // Three registers from instruction.
     int extra;       // Immediate or target or shamt field or offset.
                      // Immediates are sign-extended.
 };
diff --git a/code/machine/mipssim.h b/code/machine/mipssim.h
index dfd9728..885ea02 100644
--- a/code/machine/mipssim.h
+++ b/code/machine/mipssim.h
@@ -155,7 +155,7 @@ static int specialTable[] = {
 enum RegType { NONE, RS, RT, RD, EXTRA };
 
 struct OpString {
-    char *format;	// Printed version of instruction
+    char format[100];	// Printed version of instruction
     RegType args[3];
 };
 
diff --git a/code/machine/translate.cc b/code/machine/translate.cc
index d6f01fe..352ae0a 100644
--- a/code/machine/translate.cc
+++ b/code/machine/translate.cc
@@ -236,7 +236,7 @@ Machine::Translate(int virtAddr, int* physAddr, int size, bool writing)
 
     // if the pageFrame is too big, there is something really wrong!
     // An invalid translation was loaded into the page table or TLB.
-    if (pageFrame >= NumPhysPages) {
+    if (pageFrame >= static_cast<unsigned>(NumPhysPages)) {
 	DEBUG(dbgAddr, "Illegal pageframe " << pageFrame);
 	return BusErrorException;
     }
diff --git a/code/network/post.cc b/code/network/post.cc
index 4015232..f81f26f 100644
--- a/code/network/post.cc
+++ b/code/network/post.cc
@@ -152,14 +152,16 @@ MailBox::Get(PacketHeader *pktHdr, MailHeader *mailHdr, char *data)
 
 PostOfficeInput::PostOfficeInput(int nBoxes)
 {
-    messageAvailable = new Semaphore("message available", 0);
+    char messageAvailableStringConstant[] = "message available";
+    messageAvailable = new Semaphore(messageAvailableStringConstant, 0);
 
     numBoxes = nBoxes;
     boxes = new MailBox[nBoxes];
 
     network = new NetworkInput(this);
 
-    Thread *t = new Thread("postal worker", 1);
+    char postalworkerStringConstant[] = "postal worker";
+    Thread *t = new Thread(postalworkerStringConstant, 1);
 
     t->Fork(PostOfficeInput::PostalDelivery, this);
 }
@@ -265,8 +267,10 @@ PostOfficeInput::CallBack()
 
 PostOfficeOutput::PostOfficeOutput(double reliability)
 {
-    messageSent = new Semaphore("message sent", 0);
-    sendLock = new Lock("message send lock");
+    char messagesentStringConstant[] = "message sent";
+    char messagesendlockStringConstant[] = "message send lock";
+    messageSent = new Semaphore(messagesentStringConstant, 0);
+    sendLock = new Lock(messagesendlockStringConstant);
 
     network = new NetworkOutput(reliability, this);
 }
diff --git a/code/threads/kernel.cc b/code/threads/kernel.cc
index d9dbd7a..68ff13d 100644
--- a/code/threads/kernel.cc
+++ b/code/threads/kernel.cc
@@ -94,8 +94,8 @@ Kernel::Initialize()
     // But if it ever tries to give up the CPU, we better have a Thread
     // object to save its state.
 
-
-    currentThread = new Thread("main", threadNum++);
+    char mainThreadName[] = "main";
+    currentThread = new Thread(mainThreadName, threadNum++);
     currentThread->setStatus(RUNNING);
 
     stats = new Statistics();		// collect statistics
@@ -154,7 +154,8 @@ Kernel::ThreadSelfTest() {
    currentThread->SelfTest();	// test thread switching
 
    				// test semaphore operation
-   semaphore = new Semaphore("test", 0);
+   char testSemaphoreName[] = "test";
+   semaphore = new Semaphore(testSemaphoreName, 0);
    semaphore->SelfTest();
    delete semaphore;
 
@@ -210,8 +211,8 @@ Kernel::NetworkTest() {
         int farHost = (hostName == 0 ? 1 : 0);
         PacketHeader outPktHdr, inPktHdr;
         MailHeader outMailHdr, inMailHdr;
-        char *data = "Hello there!";
-        char *ack = "Got it!";
+        char data[] = "Hello there!";
+        char ack[] = "Got it!";
         char buffer[MaxMailSize];
 
         // construct packet, mail header for original message
@@ -261,7 +262,8 @@ void ForkExecute(Thread *t)
 void Kernel::ExecAll()
 {
 	for (int i=1;i<=execfileNum;i++) {
-		int a = Exec(execfile[i]);
+		// int a = Exec(execfile[i]);
+        Exec(execfile[i]);
 	}
 	currentThread->Finish();
     //Kernel::Exec();
diff --git a/code/threads/main.cc b/code/threads/main.cc
index 88bdd86..efff3f9 100644
--- a/code/threads/main.cc
+++ b/code/threads/main.cc
@@ -167,7 +167,8 @@ int
 main(int argc, char **argv)
 {
     int i;
-    char *debugArg = "";
+    char emptyStringConstant[] = "";
+    char *debugArg = emptyStringConstant;
     char *userProgName = NULL;        // default is not to execute a user prog
     bool threadTestFlag = false;
     bool consoleTestFlag = false;
diff --git a/code/threads/synch.cc b/code/threads/synch.cc
index 16e49d3..89ee637 100644
--- a/code/threads/synch.cc
+++ b/code/threads/synch.cc
@@ -135,10 +135,11 @@ SelfTestHelper (Semaphore *pong)
 void
 Semaphore::SelfTest()
 {
-    Thread *helper = new Thread("ping", 1);
+    char pingStringConstant[] = "ping";
+    Thread *helper = new Thread(pingStringConstant, 1);
 
     ASSERT(value == 0);		// otherwise test won't work!
-    ping = new Semaphore("ping", 0);
+    ping = new Semaphore(pingStringConstant, 0);
     helper->Fork((VoidFunctionPtr) SelfTestHelper, this);
     for (int i = 0; i < 10; i++) {
         ping->V();
@@ -157,8 +158,9 @@ Semaphore::SelfTest()
 
 Lock::Lock(char* debugName)
 {
+    char lockStringConstant[] = "lock";
     name = debugName;
-    semaphore = new Semaphore("lock", 1);  // initially, unlocked
+    semaphore = new Semaphore(lockStringConstant, 1);  // initially, unlocked
     lockHolder = NULL;
 }
 
@@ -247,7 +249,8 @@ void Condition::Wait(Lock* conditionLock)
 
      ASSERT(conditionLock->IsHeldByCurrentThread());
 
-     waiter = new Semaphore("condition", 0);
+     char conditionStringConstant[] = "condition";
+     waiter = new Semaphore(conditionStringConstant, 0);
      waitQueue->Append(waiter);
      conditionLock->Release();
      waiter->P();
diff --git a/code/threads/synchlist.cc b/code/threads/synchlist.cc
index 308c5a0..ae93dcb 100644
--- a/code/threads/synchlist.cc
+++ b/code/threads/synchlist.cc
@@ -23,8 +23,10 @@ template <class T>
 SynchList<T>::SynchList()
 {
     list = new List<T>;
-    lock = new Lock("list lock");
-    listEmpty = new Condition("list empty cond");
+    char listlockStringConstant[] = "list lock";
+    lock = new Lock(listlockStringConstant);
+    char listemptycondStringConstant[] = "list empty cond";
+    listEmpty = new Condition(listemptycondStringConstant);
 }
 
 //----------------------------------------------------------------------
@@ -117,7 +119,8 @@ template <class T>
 void
 SynchList<T>::SelfTest(T val)
 {
-    Thread *helper = new Thread("ping", 1);
+    char pingStringConstant[] = "ping";
+    Thread *helper = new Thread(pingStringConstant, 1);
 
     ASSERT(list->IsEmpty());
     selfTestPing = new SynchList<T>;
diff --git a/code/threads/thread.cc b/code/threads/thread.cc
index 0e41467..590fac1 100644
--- a/code/threads/thread.cc
+++ b/code/threads/thread.cc
@@ -427,7 +427,8 @@ Thread::SelfTest()
 {
     DEBUG(dbgThread, "Entering Thread::SelfTest");
 
-    Thread *t = new Thread("forked thread", 1);
+    char forkedthreadStringConstant[] = "forked thread";
+    Thread *t = new Thread(forkedthreadStringConstant, 1);
 
     t->Fork((VoidFunctionPtr) SimpleThread, (void *) 1);
     kernel->currentThread->Yield();
diff --git a/code/userprog/addrspace.cc b/code/userprog/addrspace.cc
index 65d6a68..6e219cc 100644
--- a/code/userprog/addrspace.cc
+++ b/code/userprog/addrspace.cc
@@ -135,7 +135,7 @@ AddrSpace::Load(char *fileName)
     numPages = divRoundUp(size, PageSize);
     size = numPages * PageSize;
 
-    ASSERT(numPages <= NumPhysPages);		// check we're not trying
+    ASSERT(numPages <= static_cast<unsigned>(NumPhysPages));		// check we're not trying
 						// to run anything too big --
 						// at least until we have
 						// virtual memory
@@ -301,9 +301,9 @@ AddrSpace::Translate(unsigned int vaddr, unsigned int *paddr, int isReadWrite)
     if(isReadWrite)
         pte->dirty = TRUE;
 
-    *paddr = pfn*PageSize + offset;
+    *paddr = static_cast<unsigned>(pfn) * PageSize + offset;
 
-    ASSERT((*paddr < MemorySize));
+    ASSERT((*paddr < static_cast<unsigned>(MemorySize)));
 
     //cerr << " -- AddrSpace::Translate(): vaddr: " << vaddr <<
     //  ", paddr: " << *paddr << "\n";
diff --git a/code/userprog/exception.cc b/code/userprog/exception.cc
index 1e6e71e..f0d5cc3 100644
--- a/code/userprog/exception.cc
+++ b/code/userprog/exception.cc
@@ -53,7 +53,11 @@ ExceptionHandler(ExceptionType which)
 {
     int type = kernel->machine->ReadRegister(2);
 	int val;
-    int status, exit, threadID, programID;
+    int status;
+    // the following three vars has not been used yet.
+    // int threadID;
+    // int programID;
+    // int exit;
 	DEBUG(dbgSys, "Received Exception " << which << " type: " << type << "\n");
     switch (which) {
     case SyscallException:
diff --git a/code/userprog/synchconsole.cc b/code/userprog/synchconsole.cc
index ffa82ae..2979ce8 100644
--- a/code/userprog/synchconsole.cc
+++ b/code/userprog/synchconsole.cc
@@ -19,9 +19,10 @@
 
 SynchConsoleInput::SynchConsoleInput(char *inputFile)
 {
+    char consoleinStringConstant[] = "console in";
     consoleInput = new ConsoleInput(inputFile, this);
-    lock = new Lock("console in");
-    waitFor = new Semaphore("console in", 0);
+    lock = new Lock(consoleinStringConstant);
+    waitFor = new Semaphore(consoleinStringConstant, 0);
 }
 
 //----------------------------------------------------------------------
@@ -75,9 +76,10 @@ SynchConsoleInput::CallBack()
 
 SynchConsoleOutput::SynchConsoleOutput(char *outputFile)
 {
+    char consoleoutStringConstant[] = "console out";
     consoleOutput = new ConsoleOutput(outputFile, this);
-    lock = new Lock("console out");
-    waitFor = new Semaphore("console out", 0);
+    lock = new Lock(consoleoutStringConstant);
+    waitFor = new Semaphore(consoleoutStringConstant, 0);
 }
 
 //----------------------------------------------------------------------
